import fmtUnit from '../_util/fmtUnit';

var _my$getSystemInfoSync = my.getSystemInfoSync(),
    windowWidth = _my$getSystemInfoSync.windowWidth;

Component({
  props: {
    className: '',
    // tabbar激活的 tab 样式 class
    activeCls: '',
    // tabbar的自定义样式class
    tabBarCls: '',
    // 选中选项卡下划线颜色
    tabBarUnderlineColor: '#1677FF',
    // 选中选项卡字体颜色
    tabBarActiveTextColor: '#1677FF',
    // 胶囊选中选项卡字体颜色
    capsuleTabBarActiveTextColor: '#ffffff',
    // 未选中选项卡字体颜色
    tabBarInactiveTextColor: '#333333',
    // 未选中描述字体颜色
    tabBarSubTextColor: '#999999',
    // 选中描述字体颜色
    tabBarActiveSubTextColor: '#ffffff',
    // 选项卡背景颜色
    tabBarBackgroundColor: '#ffffff',
    showPlus: false,
    // tabs 内容区是否可拖动，true 可拖动，内容区固定高度 false 不可拖动，内容区自适应高度
    swipeable: true,
    // 当前激活tab id
    activeTab: 0,
    animation: true,
    duration: 500,
    // 是否为胶囊形式 tab
    capsule: false,
    // 是否有副标题
    hasSubTitle: false,
    elevator: false,
    floorNumber: [],
    elevatorTop: '0px',
    showBadge: false
  },
  data: {
    windowWidth: windowWidth,
    tabWidth: 0.25,
    autoplay: false,
    animation: false,
    showLeftShadow: false,
    version: my.SDKVersion,
    viewScrollLeft: 0,
    tabViewNum: 0,
    hideRightShadow: false,
    boxWidth: 0,
    elWidth: 0,
    tabFontSize15: fmtUnit('15px'),
    tabFontSize13: fmtUnit('13px')
  },
  didMount: function didMount() {
    var _this = this;

    var _this$props = this.props,
        tabs = _this$props.tabs,
        animation = _this$props.animation,
        hasSubTitle = _this$props.hasSubTitle,
        elevator = _this$props.elevator;

    if (hasSubTitle) {
      this.setData({
        capsule: true
      });
    }

    this.setData({
      tabWidth: tabs.length > 3 ? 0.25 : 1 / tabs.length,
      animation: animation,
      autoplay: true
    });

    if (elevator) {
      this.setData({
        swipeable: false
      });

      var _loop = function _loop(i) {
        my.createSelectorQuery().select("#am-tabs-elevator-pane-" + i).boundingClientRect().exec(function (ret) {
          _this.props.floorNumber[i] = ret[0].top;

          _this.setData({
            floorNumber: _this.props.floorNumber
          });
        });
      };

      for (var i = 0; i < tabs.length; i++) {
        _loop(i);
      }

      setTimeout(function () {
        _this.$page.data.floorNumber = _this.data.floorNumber;
      }, 100);
    }
  },
  didUpdate: function didUpdate(prevProps, prevData) {
    var _this$props2 = this.props,
        tabs = _this$props2.tabs,
        elevator = _this$props2.elevator;

    if (prevProps.tabs.length !== tabs.length) {
      this.setData({
        tabWidth: tabs.length > 3 ? 0.25 : 1 / tabs.length
      });
    }

    if (elevator) {
      this.$page.data.floorNumber = this.data.floorNumber;

      if (this.$page.data.getFloorNumber >= 0) {
        this.setData({
          tabViewNum: this.$page.data.getFloorNumber,
          prevTabViewNum: prevData.tabViewNum
        });
      }
    }
  },
  methods: {
    handleSwiperChange: function handleSwiperChange(e) {
      var current = e.detail.current;
      var tabsName = e.target.dataset.tabsName;
      this.setData({
        tabViewNum: current
      });

      if (this.props.onChange) {
        this.props.onChange({
          index: current,
          tabsName: tabsName
        });
      }
    },
    handleTabClick: function handleTabClick(e) {
      var _this2 = this;

      var _e$target$dataset = e.target.dataset,
          index = _e$target$dataset.index,
          tabsName = _e$target$dataset.tabsName,
          floor = _e$target$dataset.floor;
      var boxWidth = 0;
      var elWidth = 0;
      my.createSelectorQuery().select("#" + e.currentTarget.id).boundingClientRect().exec(function (ret) {
        elWidth = ret[0].width;

        _this2.setData({
          elWidth: elWidth
        });
      });
      my.createSelectorQuery().select("#am-tabs-bar-" + tabsName + "-content").boundingClientRect().exec(function (ret) {
        boxWidth = ret[0].width;

        _this2.setData({
          boxWidth: boxWidth
        });

        if (_this2.data.elWidth > _this2.data.boxWidth / 2) {
          setTimeout(function () {
            _this2.setData({
              viewScrollLeft: e.currentTarget.offsetLeft - 40
            });
          }, 300);
        } else {
          setTimeout(function () {
            _this2.setData({
              viewScrollLeft: e.currentTarget.offsetLeft - Math.floor(_this2.data.boxWidth / 2)
            });
          }, 300);
        }
      });

      if (this.props.onTabClick) {
        this.props.onTabClick({
          index: index,
          tabsName: tabsName
        });
      }

      if (this.props.onTabClick && this.props.elevator) {
        this.setData({
          tabViewNum: this.data.prevTabViewNum
        });
        setTimeout(function () {
          _this2.props.onTabClick({
            index: index,
            tabsName: tabsName
          });
        }, 300);
        my.pageScrollTo({
          scrollTop: Math.ceil(floor),
          duration: 300
        });
      }
    },
    handlePlusClick: function handlePlusClick() {
      if (this.props.onPlusClick) {
        this.props.onPlusClick();
      }
    },
    showLeftShadow: function showLeftShadow(e) {
      if (e.detail.scrollLeft > 0) {
        this.setData({
          showLeftShadow: true
        });
      } else {
        this.setData({
          showLeftShadow: false
        });
      }
    }
  }
});